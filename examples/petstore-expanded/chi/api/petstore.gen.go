// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/xenking/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/xenking/oapi-codegen/pkg/runtime"
)

const (
	UserScopes = "user.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name of the pet
	Name string `json:"name"`

	// Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Unique id of the pet
	ID int64 `json:"id"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id int64)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, UserScopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, UserScopes, []string{"read", "write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, UserScopes, []string{"read", "write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, UserScopes, []string{"read", "write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets", wrapper.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pets/{id}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{id}", wrapper.FindPetByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//+y7jrHMEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
