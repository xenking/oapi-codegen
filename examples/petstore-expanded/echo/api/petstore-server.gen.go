// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/xenking/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/xenking/oapi-codegen/pkg/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	ctx.Set(UserScopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	ctx.Set(UserScopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(UserScopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(UserScopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//+y7jrHMEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
